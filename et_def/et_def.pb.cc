// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: et_def.proto

#include "et_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ChakraProtoMsg {
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node>
      _instance;
} _Node_default_instance_;
}  // namespace ChakraProtoMsg
namespace protobuf_et_5fdef_2eproto {
static void InitDefaultsNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChakraProtoMsg::_Node_default_instance_;
    new (ptr) ::ChakraProtoMsg::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChakraProtoMsg::Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Node =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNode}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Node.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, node_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, tensor_loc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, tensor_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, simulated_run_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, input_tensor_loc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, input_tensor_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, output_tensor_loc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, output_tensor_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, num_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, comm_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, involved_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, communicator_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, comm_src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, comm_dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, comm_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, comm_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChakraProtoMsg::Node, comm_priority_),
  1,
  0,
  2,
  ~0u,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  10,
  11,
  ~0u,
  12,
  13,
  14,
  15,
  16,
  17,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, sizeof(::ChakraProtoMsg::Node)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ChakraProtoMsg::_Node_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "et_def.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014et_def.proto\022\016ChakraProtoMsg\"\205\005\n\004Node\022"
      "\n\n\002id\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\0229\n\tnode_type\030\003"
      " \001(\0162\030.ChakraProtoMsg.NodeType:\014INVALID_"
      "NODE\022\016\n\006parent\030\004 \003(\004\022>\n\ntensor_loc\030\005 \001(\016"
      "2\032.ChakraProtoMsg.MemoryType:\016INVALID_ME"
      "MORY\022\023\n\013tensor_size\030\006 \001(\004\022\032\n\022simulated_r"
      "un_time\030\007 \001(\004\022D\n\020input_tensor_loc\030\010 \001(\0162"
      "\032.ChakraProtoMsg.MemoryType:\016INVALID_MEM"
      "ORY\022\031\n\021input_tensor_size\030\t \001(\004\022E\n\021output"
      "_tensor_loc\030\n \001(\0162\032.ChakraProtoMsg.Memor"
      "yType:\016INVALID_MEMORY\022\032\n\022output_tensor_s"
      "ize\030\013 \001(\004\022\017\n\007num_ops\030\014 \001(\004\022C\n\tcomm_type\030"
      "\r \001(\0162\".ChakraProtoMsg.CollectiveCommTyp"
      "e:\014INVALID_COMM\022\024\n\014involved_dim\030\016 \003(\010\022\027\n"
      "\017communicator_id\030\017 \001(\r\022\020\n\010comm_src\030\020 \001(\r"
      "\022\020\n\010comm_dst\030\021 \001(\r\022\021\n\tcomm_size\030\022 \001(\r\022\020\n"
      "\010comm_tag\030\023 \001(\r\022\025\n\rcomm_priority\030\024 \001(\r*\216"
      "\001\n\010NodeType\022\020\n\014INVALID_NODE\020\000\022\021\n\rMEM_LOA"
      "D_NODE\020\001\022\022\n\016MEM_STORE_NODE\020\002\022\r\n\tCOMP_NOD"
      "E\020\003\022\022\n\016COMM_SEND_NODE\020\004\022\022\n\016COMM_RECV_NOD"
      "E\020\005\022\022\n\016COMM_COLL_NODE\020\006*E\n\nMemoryType\022\022\n"
      "\016INVALID_MEMORY\020\000\022\020\n\014LOCAL_MEMORY\020\001\022\021\n\rR"
      "EMOTE_MEMORY\020\002*j\n\022CollectiveCommType\022\020\n\014"
      "INVALID_COMM\020\000\022\016\n\nALL_REDUCE\020\001\022\016\n\nALL_TO"
      "_ALL\020\002\022\016\n\nALL_GATHER\020\003\022\022\n\016REDUCE_SCATTER"
      "\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1002);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "et_def.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_et_5fdef_2eproto
namespace ChakraProtoMsg {
const ::google::protobuf::EnumDescriptor* NodeType_descriptor() {
  protobuf_et_5fdef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_et_5fdef_2eproto::file_level_enum_descriptors[0];
}
bool NodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MemoryType_descriptor() {
  protobuf_et_5fdef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_et_5fdef_2eproto::file_level_enum_descriptors[1];
}
bool MemoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CollectiveCommType_descriptor() {
  protobuf_et_5fdef_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_et_5fdef_2eproto::file_level_enum_descriptors[2];
}
bool CollectiveCommType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Node::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kNodeTypeFieldNumber;
const int Node::kParentFieldNumber;
const int Node::kTensorLocFieldNumber;
const int Node::kTensorSizeFieldNumber;
const int Node::kSimulatedRunTimeFieldNumber;
const int Node::kInputTensorLocFieldNumber;
const int Node::kInputTensorSizeFieldNumber;
const int Node::kOutputTensorLocFieldNumber;
const int Node::kOutputTensorSizeFieldNumber;
const int Node::kNumOpsFieldNumber;
const int Node::kCommTypeFieldNumber;
const int Node::kInvolvedDimFieldNumber;
const int Node::kCommunicatorIdFieldNumber;
const int Node::kCommSrcFieldNumber;
const int Node::kCommDstFieldNumber;
const int Node::kCommSizeFieldNumber;
const int Node::kCommTagFieldNumber;
const int Node::kCommPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_et_5fdef_2eproto::scc_info_Node.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChakraProtoMsg.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      parent_(from.parent_),
      involved_dim_(from.involved_dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&comm_priority_) -
    reinterpret_cast<char*>(&id_)) + sizeof(comm_priority_));
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Node)
}

void Node::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comm_priority_) -
      reinterpret_cast<char*>(&id_)) + sizeof(comm_priority_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  ::protobuf_et_5fdef_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_et_5fdef_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_et_5fdef_2eproto::scc_info_Node.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.Clear();
  involved_dim_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_tensor_loc_) -
        reinterpret_cast<char*>(&id_)) + sizeof(input_tensor_loc_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&output_tensor_loc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&comm_size_) -
        reinterpret_cast<char*>(&output_tensor_loc_)) + sizeof(comm_size_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&comm_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&comm_priority_) -
        reinterpret_cast<char*>(&comm_tag_)) + sizeof(comm_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChakraProtoMsg.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ChakraProtoMsg.Node.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChakraProtoMsg.NodeType node_type = 3 [default = INVALID_NODE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChakraProtoMsg::NodeType_IsValid(value)) {
            set_node_type(static_cast< ::ChakraProtoMsg::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_parent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_parent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChakraProtoMsg.MemoryType tensor_loc = 5 [default = INVALID_MEMORY];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChakraProtoMsg::MemoryType_IsValid(value)) {
            set_tensor_loc(static_cast< ::ChakraProtoMsg::MemoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tensor_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tensor_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tensor_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 simulated_run_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_simulated_run_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &simulated_run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChakraProtoMsg.MemoryType input_tensor_loc = 8 [default = INVALID_MEMORY];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChakraProtoMsg::MemoryType_IsValid(value)) {
            set_input_tensor_loc(static_cast< ::ChakraProtoMsg::MemoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 input_tensor_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_input_tensor_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &input_tensor_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChakraProtoMsg.MemoryType output_tensor_loc = 10 [default = INVALID_MEMORY];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChakraProtoMsg::MemoryType_IsValid(value)) {
            set_output_tensor_loc(static_cast< ::ChakraProtoMsg::MemoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 output_tensor_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_output_tensor_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &output_tensor_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_ops = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_num_ops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChakraProtoMsg.CollectiveCommType comm_type = 13 [default = INVALID_COMM];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChakraProtoMsg::CollectiveCommType_IsValid(value)) {
            set_comm_type(static_cast< ::ChakraProtoMsg::CollectiveCommType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool involved_dim = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 112u, input, this->mutable_involved_dim())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_involved_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 communicator_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_communicator_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &communicator_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 comm_src = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_comm_src();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comm_src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 comm_dst = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_comm_dst();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comm_dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 comm_size = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_comm_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comm_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 comm_tag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_comm_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comm_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 comm_priority = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_comm_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comm_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChakraProtoMsg.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChakraProtoMsg.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChakraProtoMsg.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ChakraProtoMsg.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .ChakraProtoMsg.NodeType node_type = 3 [default = INVALID_NODE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->node_type(), output);
  }

  // repeated uint64 parent = 4;
  for (int i = 0, n = this->parent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->parent(i), output);
  }

  // optional .ChakraProtoMsg.MemoryType tensor_loc = 5 [default = INVALID_MEMORY];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tensor_loc(), output);
  }

  // optional uint64 tensor_size = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tensor_size(), output);
  }

  // optional uint64 simulated_run_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->simulated_run_time(), output);
  }

  // optional .ChakraProtoMsg.MemoryType input_tensor_loc = 8 [default = INVALID_MEMORY];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->input_tensor_loc(), output);
  }

  // optional uint64 input_tensor_size = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->input_tensor_size(), output);
  }

  // optional .ChakraProtoMsg.MemoryType output_tensor_loc = 10 [default = INVALID_MEMORY];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->output_tensor_loc(), output);
  }

  // optional uint64 output_tensor_size = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->output_tensor_size(), output);
  }

  // optional uint64 num_ops = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->num_ops(), output);
  }

  // optional .ChakraProtoMsg.CollectiveCommType comm_type = 13 [default = INVALID_COMM];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->comm_type(), output);
  }

  // repeated bool involved_dim = 14;
  for (int i = 0, n = this->involved_dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      14, this->involved_dim(i), output);
  }

  // optional uint32 communicator_id = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->communicator_id(), output);
  }

  // optional uint32 comm_src = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->comm_src(), output);
  }

  // optional uint32 comm_dst = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->comm_dst(), output);
  }

  // optional uint32 comm_size = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->comm_size(), output);
  }

  // optional uint32 comm_tag = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->comm_tag(), output);
  }

  // optional uint32 comm_priority = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->comm_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChakraProtoMsg.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ChakraProtoMsg.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .ChakraProtoMsg.NodeType node_type = 3 [default = INVALID_NODE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->node_type(), target);
  }

  // repeated uint64 parent = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->parent_, target);

  // optional .ChakraProtoMsg.MemoryType tensor_loc = 5 [default = INVALID_MEMORY];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tensor_loc(), target);
  }

  // optional uint64 tensor_size = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->tensor_size(), target);
  }

  // optional uint64 simulated_run_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->simulated_run_time(), target);
  }

  // optional .ChakraProtoMsg.MemoryType input_tensor_loc = 8 [default = INVALID_MEMORY];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->input_tensor_loc(), target);
  }

  // optional uint64 input_tensor_size = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->input_tensor_size(), target);
  }

  // optional .ChakraProtoMsg.MemoryType output_tensor_loc = 10 [default = INVALID_MEMORY];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->output_tensor_loc(), target);
  }

  // optional uint64 output_tensor_size = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->output_tensor_size(), target);
  }

  // optional uint64 num_ops = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->num_ops(), target);
  }

  // optional .ChakraProtoMsg.CollectiveCommType comm_type = 13 [default = INVALID_COMM];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->comm_type(), target);
  }

  // repeated bool involved_dim = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(14, this->involved_dim_, target);

  // optional uint32 communicator_id = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->communicator_id(), target);
  }

  // optional uint32 comm_src = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->comm_src(), target);
  }

  // optional uint32 comm_dst = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->comm_dst(), target);
  }

  // optional uint32 comm_size = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->comm_size(), target);
  }

  // optional uint32 comm_tag = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->comm_tag(), target);
  }

  // optional uint32 comm_priority = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->comm_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Node)
  return target;
}

size_t Node::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChakraProtoMsg.Node)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint64 parent = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->parent_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->parent_size());
    total_size += data_size;
  }

  // repeated bool involved_dim = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->involved_dim_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->involved_dim_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional .ChakraProtoMsg.NodeType node_type = 3 [default = INVALID_NODE];
    if (has_node_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type());
    }

    // optional .ChakraProtoMsg.MemoryType tensor_loc = 5 [default = INVALID_MEMORY];
    if (has_tensor_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tensor_loc());
    }

    // optional uint64 tensor_size = 6;
    if (has_tensor_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tensor_size());
    }

    // optional uint64 simulated_run_time = 7;
    if (has_simulated_run_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->simulated_run_time());
    }

    // optional uint64 input_tensor_size = 9;
    if (has_input_tensor_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->input_tensor_size());
    }

    // optional .ChakraProtoMsg.MemoryType input_tensor_loc = 8 [default = INVALID_MEMORY];
    if (has_input_tensor_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_tensor_loc());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ChakraProtoMsg.MemoryType output_tensor_loc = 10 [default = INVALID_MEMORY];
    if (has_output_tensor_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_tensor_loc());
    }

    // optional uint64 output_tensor_size = 11;
    if (has_output_tensor_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->output_tensor_size());
    }

    // optional uint64 num_ops = 12;
    if (has_num_ops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_ops());
    }

    // optional .ChakraProtoMsg.CollectiveCommType comm_type = 13 [default = INVALID_COMM];
    if (has_comm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->comm_type());
    }

    // optional uint32 communicator_id = 15;
    if (has_communicator_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->communicator_id());
    }

    // optional uint32 comm_src = 16;
    if (has_comm_src()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comm_src());
    }

    // optional uint32 comm_dst = 17;
    if (has_comm_dst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comm_dst());
    }

    // optional uint32 comm_size = 18;
    if (has_comm_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comm_size());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional uint32 comm_tag = 19;
    if (has_comm_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comm_tag());
    }

    // optional uint32 comm_priority = 20;
    if (has_comm_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comm_priority());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChakraProtoMsg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChakraProtoMsg.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChakraProtoMsg.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parent_.MergeFrom(from.parent_);
  involved_dim_.MergeFrom(from.involved_dim_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      node_type_ = from.node_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      tensor_loc_ = from.tensor_loc_;
    }
    if (cached_has_bits & 0x00000010u) {
      tensor_size_ = from.tensor_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      simulated_run_time_ = from.simulated_run_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      input_tensor_size_ = from.input_tensor_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_tensor_loc_ = from.input_tensor_loc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      output_tensor_loc_ = from.output_tensor_loc_;
    }
    if (cached_has_bits & 0x00000200u) {
      output_tensor_size_ = from.output_tensor_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_ops_ = from.num_ops_;
    }
    if (cached_has_bits & 0x00000800u) {
      comm_type_ = from.comm_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      communicator_id_ = from.communicator_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      comm_src_ = from.comm_src_;
    }
    if (cached_has_bits & 0x00004000u) {
      comm_dst_ = from.comm_dst_;
    }
    if (cached_has_bits & 0x00008000u) {
      comm_size_ = from.comm_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      comm_tag_ = from.comm_tag_;
    }
    if (cached_has_bits & 0x00020000u) {
      comm_priority_ = from.comm_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChakraProtoMsg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  parent_.InternalSwap(&other->parent_);
  involved_dim_.InternalSwap(&other->involved_dim_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(node_type_, other->node_type_);
  swap(tensor_loc_, other->tensor_loc_);
  swap(tensor_size_, other->tensor_size_);
  swap(simulated_run_time_, other->simulated_run_time_);
  swap(input_tensor_size_, other->input_tensor_size_);
  swap(input_tensor_loc_, other->input_tensor_loc_);
  swap(output_tensor_loc_, other->output_tensor_loc_);
  swap(output_tensor_size_, other->output_tensor_size_);
  swap(num_ops_, other->num_ops_);
  swap(comm_type_, other->comm_type_);
  swap(communicator_id_, other->communicator_id_);
  swap(comm_src_, other->comm_src_);
  swap(comm_dst_, other->comm_dst_);
  swap(comm_size_, other->comm_size_);
  swap(comm_tag_, other->comm_tag_);
  swap(comm_priority_, other->comm_priority_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_et_5fdef_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_et_5fdef_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChakraProtoMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ChakraProtoMsg::Node* Arena::CreateMaybeMessage< ::ChakraProtoMsg::Node >(Arena* arena) {
  return Arena::CreateInternal< ::ChakraProtoMsg::Node >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
