// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: et_def.proto

#ifndef PROTOBUF_INCLUDED_et_5fdef_2eproto
#define PROTOBUF_INCLUDED_et_5fdef_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_et_5fdef_2eproto 

namespace protobuf_et_5fdef_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_et_5fdef_2eproto
namespace ChakraProtoMsg {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace ChakraProtoMsg
namespace google {
namespace protobuf {
template<> ::ChakraProtoMsg::Node* Arena::CreateMaybeMessage<::ChakraProtoMsg::Node>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ChakraProtoMsg {

enum NodeType {
  INVALID_NODE = 0,
  MEM_LOAD_NODE = 1,
  MEM_STORE_NODE = 2,
  COMP_NODE = 3,
  COMM_SEND_NODE = 4,
  COMM_RECV_NODE = 5,
  COMM_COLL_NODE = 6
};
bool NodeType_IsValid(int value);
const NodeType NodeType_MIN = INVALID_NODE;
const NodeType NodeType_MAX = COMM_COLL_NODE;
const int NodeType_ARRAYSIZE = NodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeType_descriptor();
inline const ::std::string& NodeType_Name(NodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeType_descriptor(), value);
}
inline bool NodeType_Parse(
    const ::std::string& name, NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeType>(
    NodeType_descriptor(), name, value);
}
enum MemoryType {
  INVALID_MEMORY = 0,
  LOCAL_MEMORY = 1,
  REMOTE_MEMORY = 2
};
bool MemoryType_IsValid(int value);
const MemoryType MemoryType_MIN = INVALID_MEMORY;
const MemoryType MemoryType_MAX = REMOTE_MEMORY;
const int MemoryType_ARRAYSIZE = MemoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MemoryType_descriptor();
inline const ::std::string& MemoryType_Name(MemoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MemoryType_descriptor(), value);
}
inline bool MemoryType_Parse(
    const ::std::string& name, MemoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MemoryType>(
    MemoryType_descriptor(), name, value);
}
enum CollectiveCommType {
  INVALID_COMM = 0,
  ALL_REDUCE = 1,
  ALL_TO_ALL = 2,
  ALL_GATHER = 3,
  REDUCE_SCATTER = 4
};
bool CollectiveCommType_IsValid(int value);
const CollectiveCommType CollectiveCommType_MIN = INVALID_COMM;
const CollectiveCommType CollectiveCommType_MAX = REDUCE_SCATTER;
const int CollectiveCommType_ARRAYSIZE = CollectiveCommType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CollectiveCommType_descriptor();
inline const ::std::string& CollectiveCommType_Name(CollectiveCommType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CollectiveCommType_descriptor(), value);
}
inline bool CollectiveCommType_Parse(
    const ::std::string& name, CollectiveCommType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollectiveCommType>(
    CollectiveCommType_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChakraProtoMsg.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(NULL);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 parent = 4;
  int parent_size() const;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  ::google::protobuf::uint64 parent(int index) const;
  void set_parent(int index, ::google::protobuf::uint64 value);
  void add_parent(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      parent() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_parent();

  // repeated bool involved_dim = 14;
  int involved_dim_size() const;
  void clear_involved_dim();
  static const int kInvolvedDimFieldNumber = 14;
  bool involved_dim(int index) const;
  void set_involved_dim(int index, bool value);
  void add_involved_dim(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      involved_dim() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_involved_dim();

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional .ChakraProtoMsg.NodeType node_type = 3 [default = INVALID_NODE];
  bool has_node_type() const;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 3;
  ::ChakraProtoMsg::NodeType node_type() const;
  void set_node_type(::ChakraProtoMsg::NodeType value);

  // optional .ChakraProtoMsg.MemoryType tensor_loc = 5 [default = INVALID_MEMORY];
  bool has_tensor_loc() const;
  void clear_tensor_loc();
  static const int kTensorLocFieldNumber = 5;
  ::ChakraProtoMsg::MemoryType tensor_loc() const;
  void set_tensor_loc(::ChakraProtoMsg::MemoryType value);

  // optional uint64 tensor_size = 6;
  bool has_tensor_size() const;
  void clear_tensor_size();
  static const int kTensorSizeFieldNumber = 6;
  ::google::protobuf::uint64 tensor_size() const;
  void set_tensor_size(::google::protobuf::uint64 value);

  // optional uint64 simulated_run_time = 7;
  bool has_simulated_run_time() const;
  void clear_simulated_run_time();
  static const int kSimulatedRunTimeFieldNumber = 7;
  ::google::protobuf::uint64 simulated_run_time() const;
  void set_simulated_run_time(::google::protobuf::uint64 value);

  // optional uint64 input_tensor_size = 9;
  bool has_input_tensor_size() const;
  void clear_input_tensor_size();
  static const int kInputTensorSizeFieldNumber = 9;
  ::google::protobuf::uint64 input_tensor_size() const;
  void set_input_tensor_size(::google::protobuf::uint64 value);

  // optional .ChakraProtoMsg.MemoryType input_tensor_loc = 8 [default = INVALID_MEMORY];
  bool has_input_tensor_loc() const;
  void clear_input_tensor_loc();
  static const int kInputTensorLocFieldNumber = 8;
  ::ChakraProtoMsg::MemoryType input_tensor_loc() const;
  void set_input_tensor_loc(::ChakraProtoMsg::MemoryType value);

  // optional .ChakraProtoMsg.MemoryType output_tensor_loc = 10 [default = INVALID_MEMORY];
  bool has_output_tensor_loc() const;
  void clear_output_tensor_loc();
  static const int kOutputTensorLocFieldNumber = 10;
  ::ChakraProtoMsg::MemoryType output_tensor_loc() const;
  void set_output_tensor_loc(::ChakraProtoMsg::MemoryType value);

  // optional uint64 output_tensor_size = 11;
  bool has_output_tensor_size() const;
  void clear_output_tensor_size();
  static const int kOutputTensorSizeFieldNumber = 11;
  ::google::protobuf::uint64 output_tensor_size() const;
  void set_output_tensor_size(::google::protobuf::uint64 value);

  // optional uint64 num_ops = 12;
  bool has_num_ops() const;
  void clear_num_ops();
  static const int kNumOpsFieldNumber = 12;
  ::google::protobuf::uint64 num_ops() const;
  void set_num_ops(::google::protobuf::uint64 value);

  // optional .ChakraProtoMsg.CollectiveCommType comm_type = 13 [default = INVALID_COMM];
  bool has_comm_type() const;
  void clear_comm_type();
  static const int kCommTypeFieldNumber = 13;
  ::ChakraProtoMsg::CollectiveCommType comm_type() const;
  void set_comm_type(::ChakraProtoMsg::CollectiveCommType value);

  // optional uint32 communicator_id = 15;
  bool has_communicator_id() const;
  void clear_communicator_id();
  static const int kCommunicatorIdFieldNumber = 15;
  ::google::protobuf::uint32 communicator_id() const;
  void set_communicator_id(::google::protobuf::uint32 value);

  // optional uint32 comm_src = 16;
  bool has_comm_src() const;
  void clear_comm_src();
  static const int kCommSrcFieldNumber = 16;
  ::google::protobuf::uint32 comm_src() const;
  void set_comm_src(::google::protobuf::uint32 value);

  // optional uint32 comm_dst = 17;
  bool has_comm_dst() const;
  void clear_comm_dst();
  static const int kCommDstFieldNumber = 17;
  ::google::protobuf::uint32 comm_dst() const;
  void set_comm_dst(::google::protobuf::uint32 value);

  // optional uint32 comm_size = 18;
  bool has_comm_size() const;
  void clear_comm_size();
  static const int kCommSizeFieldNumber = 18;
  ::google::protobuf::uint32 comm_size() const;
  void set_comm_size(::google::protobuf::uint32 value);

  // optional uint32 comm_tag = 19;
  bool has_comm_tag() const;
  void clear_comm_tag();
  static const int kCommTagFieldNumber = 19;
  ::google::protobuf::uint32 comm_tag() const;
  void set_comm_tag(::google::protobuf::uint32 value);

  // optional uint32 comm_priority = 20;
  bool has_comm_priority() const;
  void clear_comm_priority();
  static const int kCommPriorityFieldNumber = 20;
  ::google::protobuf::uint32 comm_priority() const;
  void set_comm_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ChakraProtoMsg.Node)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_node_type();
  void clear_has_node_type();
  void set_has_tensor_loc();
  void clear_has_tensor_loc();
  void set_has_tensor_size();
  void clear_has_tensor_size();
  void set_has_simulated_run_time();
  void clear_has_simulated_run_time();
  void set_has_input_tensor_loc();
  void clear_has_input_tensor_loc();
  void set_has_input_tensor_size();
  void clear_has_input_tensor_size();
  void set_has_output_tensor_loc();
  void clear_has_output_tensor_loc();
  void set_has_output_tensor_size();
  void clear_has_output_tensor_size();
  void set_has_num_ops();
  void clear_has_num_ops();
  void set_has_comm_type();
  void clear_has_comm_type();
  void set_has_communicator_id();
  void clear_has_communicator_id();
  void set_has_comm_src();
  void clear_has_comm_src();
  void set_has_comm_dst();
  void clear_has_comm_dst();
  void set_has_comm_size();
  void clear_has_comm_size();
  void set_has_comm_tag();
  void clear_has_comm_tag();
  void set_has_comm_priority();
  void clear_has_comm_priority();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > parent_;
  ::google::protobuf::RepeatedField< bool > involved_dim_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  int node_type_;
  int tensor_loc_;
  ::google::protobuf::uint64 tensor_size_;
  ::google::protobuf::uint64 simulated_run_time_;
  ::google::protobuf::uint64 input_tensor_size_;
  int input_tensor_loc_;
  int output_tensor_loc_;
  ::google::protobuf::uint64 output_tensor_size_;
  ::google::protobuf::uint64 num_ops_;
  int comm_type_;
  ::google::protobuf::uint32 communicator_id_;
  ::google::protobuf::uint32 comm_src_;
  ::google::protobuf::uint32 comm_dst_;
  ::google::protobuf::uint32 comm_size_;
  ::google::protobuf::uint32 comm_tag_;
  ::google::protobuf::uint32 comm_priority_;
  friend struct ::protobuf_et_5fdef_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// required uint64 id = 1;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Node::id() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.id)
  return id_;
}
inline void Node::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.id)
}

// required string name = 2;
inline bool Node::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.name)
  return name_.GetNoArena();
}
inline void Node::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.name)
}
#if LANG_CXX11
inline void Node::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChakraProtoMsg.Node.name)
}
#endif
inline void Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChakraProtoMsg.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChakraProtoMsg.Node.name)
}
inline ::std::string* Node::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ChakraProtoMsg.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:ChakraProtoMsg.Node.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.Node.name)
}

// optional .ChakraProtoMsg.NodeType node_type = 3 [default = INVALID_NODE];
inline bool Node::has_node_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_node_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_node_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_node_type() {
  node_type_ = 0;
  clear_has_node_type();
}
inline ::ChakraProtoMsg::NodeType Node::node_type() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.node_type)
  return static_cast< ::ChakraProtoMsg::NodeType >(node_type_);
}
inline void Node::set_node_type(::ChakraProtoMsg::NodeType value) {
  assert(::ChakraProtoMsg::NodeType_IsValid(value));
  set_has_node_type();
  node_type_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.node_type)
}

// repeated uint64 parent = 4;
inline int Node::parent_size() const {
  return parent_.size();
}
inline void Node::clear_parent() {
  parent_.Clear();
}
inline ::google::protobuf::uint64 Node::parent(int index) const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.parent)
  return parent_.Get(index);
}
inline void Node::set_parent(int index, ::google::protobuf::uint64 value) {
  parent_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.parent)
}
inline void Node::add_parent(::google::protobuf::uint64 value) {
  parent_.Add(value);
  // @@protoc_insertion_point(field_add:ChakraProtoMsg.Node.parent)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Node::parent() const {
  // @@protoc_insertion_point(field_list:ChakraProtoMsg.Node.parent)
  return parent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Node::mutable_parent() {
  // @@protoc_insertion_point(field_mutable_list:ChakraProtoMsg.Node.parent)
  return &parent_;
}

// optional .ChakraProtoMsg.MemoryType tensor_loc = 5 [default = INVALID_MEMORY];
inline bool Node::has_tensor_loc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_tensor_loc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_tensor_loc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_tensor_loc() {
  tensor_loc_ = 0;
  clear_has_tensor_loc();
}
inline ::ChakraProtoMsg::MemoryType Node::tensor_loc() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.tensor_loc)
  return static_cast< ::ChakraProtoMsg::MemoryType >(tensor_loc_);
}
inline void Node::set_tensor_loc(::ChakraProtoMsg::MemoryType value) {
  assert(::ChakraProtoMsg::MemoryType_IsValid(value));
  set_has_tensor_loc();
  tensor_loc_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.tensor_loc)
}

// optional uint64 tensor_size = 6;
inline bool Node::has_tensor_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_tensor_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_tensor_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_tensor_size() {
  tensor_size_ = GOOGLE_ULONGLONG(0);
  clear_has_tensor_size();
}
inline ::google::protobuf::uint64 Node::tensor_size() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.tensor_size)
  return tensor_size_;
}
inline void Node::set_tensor_size(::google::protobuf::uint64 value) {
  set_has_tensor_size();
  tensor_size_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.tensor_size)
}

// optional uint64 simulated_run_time = 7;
inline bool Node::has_simulated_run_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_simulated_run_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_simulated_run_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_simulated_run_time() {
  simulated_run_time_ = GOOGLE_ULONGLONG(0);
  clear_has_simulated_run_time();
}
inline ::google::protobuf::uint64 Node::simulated_run_time() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.simulated_run_time)
  return simulated_run_time_;
}
inline void Node::set_simulated_run_time(::google::protobuf::uint64 value) {
  set_has_simulated_run_time();
  simulated_run_time_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.simulated_run_time)
}

// optional .ChakraProtoMsg.MemoryType input_tensor_loc = 8 [default = INVALID_MEMORY];
inline bool Node::has_input_tensor_loc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Node::set_has_input_tensor_loc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Node::clear_has_input_tensor_loc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Node::clear_input_tensor_loc() {
  input_tensor_loc_ = 0;
  clear_has_input_tensor_loc();
}
inline ::ChakraProtoMsg::MemoryType Node::input_tensor_loc() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.input_tensor_loc)
  return static_cast< ::ChakraProtoMsg::MemoryType >(input_tensor_loc_);
}
inline void Node::set_input_tensor_loc(::ChakraProtoMsg::MemoryType value) {
  assert(::ChakraProtoMsg::MemoryType_IsValid(value));
  set_has_input_tensor_loc();
  input_tensor_loc_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.input_tensor_loc)
}

// optional uint64 input_tensor_size = 9;
inline bool Node::has_input_tensor_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Node::set_has_input_tensor_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Node::clear_has_input_tensor_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Node::clear_input_tensor_size() {
  input_tensor_size_ = GOOGLE_ULONGLONG(0);
  clear_has_input_tensor_size();
}
inline ::google::protobuf::uint64 Node::input_tensor_size() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.input_tensor_size)
  return input_tensor_size_;
}
inline void Node::set_input_tensor_size(::google::protobuf::uint64 value) {
  set_has_input_tensor_size();
  input_tensor_size_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.input_tensor_size)
}

// optional .ChakraProtoMsg.MemoryType output_tensor_loc = 10 [default = INVALID_MEMORY];
inline bool Node::has_output_tensor_loc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Node::set_has_output_tensor_loc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Node::clear_has_output_tensor_loc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Node::clear_output_tensor_loc() {
  output_tensor_loc_ = 0;
  clear_has_output_tensor_loc();
}
inline ::ChakraProtoMsg::MemoryType Node::output_tensor_loc() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.output_tensor_loc)
  return static_cast< ::ChakraProtoMsg::MemoryType >(output_tensor_loc_);
}
inline void Node::set_output_tensor_loc(::ChakraProtoMsg::MemoryType value) {
  assert(::ChakraProtoMsg::MemoryType_IsValid(value));
  set_has_output_tensor_loc();
  output_tensor_loc_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.output_tensor_loc)
}

// optional uint64 output_tensor_size = 11;
inline bool Node::has_output_tensor_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Node::set_has_output_tensor_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Node::clear_has_output_tensor_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Node::clear_output_tensor_size() {
  output_tensor_size_ = GOOGLE_ULONGLONG(0);
  clear_has_output_tensor_size();
}
inline ::google::protobuf::uint64 Node::output_tensor_size() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.output_tensor_size)
  return output_tensor_size_;
}
inline void Node::set_output_tensor_size(::google::protobuf::uint64 value) {
  set_has_output_tensor_size();
  output_tensor_size_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.output_tensor_size)
}

// optional uint64 num_ops = 12;
inline bool Node::has_num_ops() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Node::set_has_num_ops() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Node::clear_has_num_ops() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Node::clear_num_ops() {
  num_ops_ = GOOGLE_ULONGLONG(0);
  clear_has_num_ops();
}
inline ::google::protobuf::uint64 Node::num_ops() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.num_ops)
  return num_ops_;
}
inline void Node::set_num_ops(::google::protobuf::uint64 value) {
  set_has_num_ops();
  num_ops_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.num_ops)
}

// optional .ChakraProtoMsg.CollectiveCommType comm_type = 13 [default = INVALID_COMM];
inline bool Node::has_comm_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Node::set_has_comm_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Node::clear_has_comm_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Node::clear_comm_type() {
  comm_type_ = 0;
  clear_has_comm_type();
}
inline ::ChakraProtoMsg::CollectiveCommType Node::comm_type() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.comm_type)
  return static_cast< ::ChakraProtoMsg::CollectiveCommType >(comm_type_);
}
inline void Node::set_comm_type(::ChakraProtoMsg::CollectiveCommType value) {
  assert(::ChakraProtoMsg::CollectiveCommType_IsValid(value));
  set_has_comm_type();
  comm_type_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.comm_type)
}

// repeated bool involved_dim = 14;
inline int Node::involved_dim_size() const {
  return involved_dim_.size();
}
inline void Node::clear_involved_dim() {
  involved_dim_.Clear();
}
inline bool Node::involved_dim(int index) const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.involved_dim)
  return involved_dim_.Get(index);
}
inline void Node::set_involved_dim(int index, bool value) {
  involved_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.involved_dim)
}
inline void Node::add_involved_dim(bool value) {
  involved_dim_.Add(value);
  // @@protoc_insertion_point(field_add:ChakraProtoMsg.Node.involved_dim)
}
inline const ::google::protobuf::RepeatedField< bool >&
Node::involved_dim() const {
  // @@protoc_insertion_point(field_list:ChakraProtoMsg.Node.involved_dim)
  return involved_dim_;
}
inline ::google::protobuf::RepeatedField< bool >*
Node::mutable_involved_dim() {
  // @@protoc_insertion_point(field_mutable_list:ChakraProtoMsg.Node.involved_dim)
  return &involved_dim_;
}

// optional uint32 communicator_id = 15;
inline bool Node::has_communicator_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Node::set_has_communicator_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Node::clear_has_communicator_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Node::clear_communicator_id() {
  communicator_id_ = 0u;
  clear_has_communicator_id();
}
inline ::google::protobuf::uint32 Node::communicator_id() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.communicator_id)
  return communicator_id_;
}
inline void Node::set_communicator_id(::google::protobuf::uint32 value) {
  set_has_communicator_id();
  communicator_id_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.communicator_id)
}

// optional uint32 comm_src = 16;
inline bool Node::has_comm_src() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Node::set_has_comm_src() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Node::clear_has_comm_src() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Node::clear_comm_src() {
  comm_src_ = 0u;
  clear_has_comm_src();
}
inline ::google::protobuf::uint32 Node::comm_src() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.comm_src)
  return comm_src_;
}
inline void Node::set_comm_src(::google::protobuf::uint32 value) {
  set_has_comm_src();
  comm_src_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.comm_src)
}

// optional uint32 comm_dst = 17;
inline bool Node::has_comm_dst() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Node::set_has_comm_dst() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Node::clear_has_comm_dst() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Node::clear_comm_dst() {
  comm_dst_ = 0u;
  clear_has_comm_dst();
}
inline ::google::protobuf::uint32 Node::comm_dst() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.comm_dst)
  return comm_dst_;
}
inline void Node::set_comm_dst(::google::protobuf::uint32 value) {
  set_has_comm_dst();
  comm_dst_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.comm_dst)
}

// optional uint32 comm_size = 18;
inline bool Node::has_comm_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Node::set_has_comm_size() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Node::clear_has_comm_size() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Node::clear_comm_size() {
  comm_size_ = 0u;
  clear_has_comm_size();
}
inline ::google::protobuf::uint32 Node::comm_size() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.comm_size)
  return comm_size_;
}
inline void Node::set_comm_size(::google::protobuf::uint32 value) {
  set_has_comm_size();
  comm_size_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.comm_size)
}

// optional uint32 comm_tag = 19;
inline bool Node::has_comm_tag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Node::set_has_comm_tag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Node::clear_has_comm_tag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Node::clear_comm_tag() {
  comm_tag_ = 0u;
  clear_has_comm_tag();
}
inline ::google::protobuf::uint32 Node::comm_tag() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.comm_tag)
  return comm_tag_;
}
inline void Node::set_comm_tag(::google::protobuf::uint32 value) {
  set_has_comm_tag();
  comm_tag_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.comm_tag)
}

// optional uint32 comm_priority = 20;
inline bool Node::has_comm_priority() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Node::set_has_comm_priority() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Node::clear_has_comm_priority() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Node::clear_comm_priority() {
  comm_priority_ = 0u;
  clear_has_comm_priority();
}
inline ::google::protobuf::uint32 Node::comm_priority() const {
  // @@protoc_insertion_point(field_get:ChakraProtoMsg.Node.comm_priority)
  return comm_priority_;
}
inline void Node::set_comm_priority(::google::protobuf::uint32 value) {
  set_has_comm_priority();
  comm_priority_ = value;
  // @@protoc_insertion_point(field_set:ChakraProtoMsg.Node.comm_priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ChakraProtoMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ChakraProtoMsg::NodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChakraProtoMsg::NodeType>() {
  return ::ChakraProtoMsg::NodeType_descriptor();
}
template <> struct is_proto_enum< ::ChakraProtoMsg::MemoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChakraProtoMsg::MemoryType>() {
  return ::ChakraProtoMsg::MemoryType_descriptor();
}
template <> struct is_proto_enum< ::ChakraProtoMsg::CollectiveCommType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChakraProtoMsg::CollectiveCommType>() {
  return ::ChakraProtoMsg::CollectiveCommType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_et_5fdef_2eproto
